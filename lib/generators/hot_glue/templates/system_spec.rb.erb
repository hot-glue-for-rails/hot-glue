require 'rails_helper'

describe 'interaction for <%= controller_class_name %>', type: :feature do
  include HotGlue::ControllerHelper
  include ActionView::RecordIdentifier

  <%= @existing_content %>
  <% unless @god %>let(:<%= @auth %>) {create(:<%= @auth.gsub('current_', '') %>)}<%end%>
<%= (@columns - @show_only).map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type
    if (type == :integer && col.to_s.ends_with?("_id") || type == :uuid)
        assoc = "#{col.to_s.gsub('_id','')}"
        the_foreign_class = eval(@singular_class + ".reflect_on_association(:" + assoc + ")").class_name.split("::").last.underscore
        "  let!(:#{assoc}1) {create(:#{the_foreign_class}" + (@hawk_keys["#{assoc}_id".to_sym] ? ", #{@auth.gsub('current_', '')}: #{@auth}": "")   + ")}"
    end
  }.compact.join("\n")
        %>
  <% item1_addOns = ""
   if (eval(@singular_class).instance_methods.include?(display_class.to_s))
    item1_addOns << "#{display_class}: FFaker::Name.name"
   end

  item1_addOns << ", " + @columns.map { |col|
  type = eval("#{singular_class}.columns_hash['#{col}']").type
  case type
  when :string
    faker_string =
    if col.to_s.include?('email')
      "#{col}: FFaker::Internet.email"
    elsif  col.to_s.include?('domain')
      "#{col}: FFaker::Internet.domain_name"
    elsif col.to_s.include?('ip_address') || col.to_s.ends_with?('_ip')
      "#{col}: FFaker::Internet.ip_v4_address"
    else
      "#{col}: FFaker::Movie.title"
    end
  when :text
    "#{col}:  FFaker::Lorem.paragraphs(10).join("  ")"

  when :float
    "#{col}: rand(1)*10000"
  when :boolean
    "#{col}: !!rand(2).floor"
  when :time
    "#{col}: Time.current + rand(5000).seconds"
  when :date
    "#{col}: Date.current + rand(50).days"
  when :datetime
    "#{col}: DateTime.current + rand(1000).seconds"
  when :integer
    if col.to_s.ends_with?("_id")
      "#{col.to_s.gsub('_id','')}: #{col.to_s.gsub('_id','')}1"
    else
     "#{col}: rand(100)"
    end
  when :uuid
    "#{col.to_s.gsub('_id','')}: #{col.to_s.gsub('_id','')}1"
  end
}.compact.join(", ")
  %>let!(:<%= singular %>1) {create(:<%= singular %><%= object_parent_mapping_as_argument_for_specs %> <%= item1_addOns %> )}
  <%= objest_nest_factory_setup %> <% unless @god %>
  before do
    login_as(<%= @auth %>)
  end <% end %>

  describe "index" do
    it "should show me the list" do
      visit <%= path_helper_plural %>
<%=
@columns.map { |col|
  type = eval("#{singular_class}.columns_hash['#{col}']").type

  case type
  when :datetime
    "      " + ["expect(page).to have_content(#{singular}#{1}.#{col}.in_time_zone(current_timezone).strftime('%m/%d/%Y @ %l:%M %p ').gsub('  ', ' ') + timezonize(current_timezone)  )"].join("\n      ")
  when :integer
    if !col.ends_with?("_id")
      "      " + ["expect(page).to have_content(#{singular}#{1}.#{col})"].join("\n      ")
    end
  when :uuid
    assoc_name = col.to_s.gsub('_id','')
    association = eval("#{singular_class}.reflect_on_association(:#{assoc_name})")


    "      " + ["expect(page).to have_content(#{singular}#{1}.#{assoc_name}.#{HotGlue.derrive_reference_name(association.class_name)})"].join("\n      ")

  when :boolean
    "      " + ["expect(page).to have_content(#{singular}#{1}.#{col} ? 'YES' : 'NO')"].join("\n      ")
  else
        "      " + ["expect(page).to have_content(#{singular}#{1}.#{col})"].join("\n      ")
  end

}.join("\n")
      %>
    end
  end

<% unless @no_create %>  describe "new & create" do
    it "should create a new <%= singular.titlecase %>" do
      visit <%= path_helper_plural %>
      click_link "New <%= @label %>"
      expect(page).to have_selector(:xpath, './/h3[contains(., "New <%= @label %>")]')
<%= test_capybara_block %>
      click_button "Save"
      expect(page).to have_content("Successfully created")
<%="      " +

  (@columns - @show_only).map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type

    case type
    when :datetime
      #    "      expect(page).to have_content(#{col}.in_time_zone(current_timezone).strftime('%m/%d/%Y')  + \" @ \" +
      # new_#{col}.in_time_zone(current_timezone).strftime('%l').strip + \":\" +
      # new_#{col}.in_time_zone(current_timezone).strftime('%M %p').strip + \" \" +
      # timezonize(current_timezone))"
    when :integer
      if col.to_s.ends_with?("_id")
        # shoould the assoication be on here
      else
         "expect(page).to have_content(new_#{col})"
      end

    when :boolean
        ["expect(page).to have_content(#{singular}#{1}.#{col} ? 'YES' : 'NO')"].join("\n      ")

    else
      "expect(page).to have_content(new_#{col})"
    end

  }.compact.join("\n      ")
  %>
    end
  end<% end %>

<% unless @no_edit %>
  describe "edit & update" do
    it "should return an editable form" do
      visit <%= path_helper_plural %>
      find("a.edit-<%= singular %>-button[href='/<%= namespace_with_slash %><%= plural %>/#{<%= singular %>1.id}/edit']").click

      expect(page).to have_content("Editing #{<%= singular %>1.<%= @display_class %>.squish || "(no name)"}")
<%= test_capybara_block %>
      click_button "Save"
      within("turbo-frame#<%= @namespace %>__#{dom_id(<%= singular %>1)} ") do
<%=
    (@columns - @show_only).map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type

      if type == :uuid || (type == :integer && col.to_s.ends_with?("_id"))
        assoc = col.to_s.gsub('_id', '')
        class_name = eval("#{@singular_class}.reflect_on_association(:#{assoc})").class_name
      "        expect(page).to have_content(#{assoc}1.#{HotGlue.derrive_reference_name(class_name)})"

      elsif type == :boolean
      '        expect(page).to have_content(new_' + col.to_s + ' ? "YES" : "NO")'

      else
      '        expect(page).to have_content(new_' + col.to_s + ')'

      end
    }.compact.join("\n")
    %>
      end
    end
  end <% end %>

<% unless @no_delete %>  describe "destroy" do
    it "should destroy" do
      visit <%= path_helper_plural %>
      accept_alert do
        find("form[action='<%= namespace_with_dash %>/<%= plural %>/#{<%= singular %>1.id}'] > input.delete-<%= singular %>-button").click
      end
      expect(page).to_not have_content(<%= singular %>1.<%= @display_class %>)
      expect(<%= singular_class %>.where(id: <%= singular %>1.id).count).to eq(0)
    end
  end<% end %>
end

