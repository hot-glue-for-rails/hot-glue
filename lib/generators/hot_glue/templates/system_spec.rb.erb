require 'rails_helper'

describe "interaction for <%= controller_class_name %>", type: :feature do
  include HotGlue::ControllerHelper
  <% unless @god %>let(:<%= @auth %>) {create(:<%= @auth.gsub('current_', '') %>)}<%end%>
    <%= @columns.map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type
      case type
      when :integer
        if col.to_s.ends_with?("_id")
          assoc = "#{col.to_s.gsub('_id','')}"
          "let!(:#{assoc}1) {create(:#{assoc}, name: FFaker::Name.name)}"
        end
      else
      end
    }.compact.join("\n")
          %>
  <% item1_addOns = ""
   if (eval(@singular_class).instance_methods.include?(display_class.to_s))
    item1_addOns << "#{display_class}: FFaker::Name.name"
   end

  item1_addOns << ", " + @columns.map { |col|
  type = eval("#{singular_class}.columns_hash['#{col}']").type
  case type
  when :string
    "#{col}: FFaker::Movie.title"
  when :text
    "#{col}:  FFaker::Lorem.paragraphs(10).join("  ")"

  when :float
    "#{col}: rand(1)*10000"
  when :boolean
    "#{col}: !!rand(2).floor"
  when :time
    "#{col}: Time.current + rand(5000).seconds"
  when :date
    "#{col}: Date.current + rand(50).days"
  when :datetime
    "#{col}: DateTime.current + rand(1000).seconds"
  when :integer
    if col.to_s.ends_with?("_id")
      # shoould the assoication be on here
    else
     "#{col}: rand(100)"
    end
  end
}.compact.join(", \n      ")
  %>let!(:<%= singular %>1) {create(:<%= singular %><%= object_parent_mapping_as_argument_for_specs %> <%= item1_addOns %> )}
  <%= objest_nest_factory_setup %> <% unless @god %>
  before(:each) do
    login_as(<%= @auth %>)
  end <% end %>

  describe "index" do
    it "should show me the list" do
      visit <%= path_helper_plural %>
<%=
@columns.map { |col|
  type = eval("#{singular_class}.columns_hash['#{col}']").type
  case type
  when :datetime
    "      " + ["expect(page).to have_content(#{singular}#{1}.#{col}.in_time_zone(current_timezone).strftime('%m/%d/%Y @ %l:%M %p ').gsub('  ', ' ') + timezonize(current_timezone)  )"].join("\n      ")
  when :integer
    if !col.ends_with?("_id")
      "      " + ["expect(page).to have_content(#{singular}#{1}.#{col})"].join("\n      ")
    end
  end

}.join("\n")
      %>
    end
  end

<% unless @no_create %>  describe "new & create" do
    it "should create a new <%= singular.titlecase %>" do
      visit <%= path_helper_plural %>
      click_link "New <%= singular.titlecase %>"
      expect(page).to have_selector(:xpath, './/h3[contains(., "New <%= singular.titlecase %>")]')

<%=
  @columns.map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type
    case type
    when :datetime
      "      " + "new_#{col} = DateTime.current + (rand(100).days) \n" +
      '      ' + "find(\"[name='#{singular}[#{ col.to_s }]']\").fill_in(with: new_#{col.to_s})"

    when :integer

      if col.to_s.ends_with?("_id")
        assoc = col.to_s.gsub('_id','')
        "      #{col}_selector = find(\"[name='#{singular}[#{col}]']\").click \n" +
        "      #{col}_selector.first('option', text: #{assoc}1.name).select_option"
      else
        "      new_#{col} = rand(10) \n" +
        "      find(\"[name='#{singular}[#{ col.to_s }]']\").fill_in(with: new_#{col.to_s})"

      end

    when :enum
        "      list_of_#{col.to_s} = #{singular_class}.defined_enums['#{col.to_s}'].keys \n" +
        "      " + "new_#{col.to_s} = list_of_#{col.to_s}[rand(list_of_#{col.to_s}.length)].to_s \n" +
        '      find("select[name=\'' + singular + '[' + col.to_s + ']\']  option[value=\'#{new_' + col.to_s + '}\']").select_option'

    when :boolean
      "     new_#{col} = rand(2).floor \n" +
      "     find(\"[name='#{singular}[#{col}]'][value='\#{new_" + col.to_s + "}']\").choose"
    else
      "      " + "new_#{col} = 'new_test-email@nowhere.com' \n" +
      "      find(\"[name='#{singular}[#{ col.to_s }]']\").fill_in(with: new_#{col.to_s})"
    end

  }.join("\n")

        %>
      click_button "Save"
      expect(page).to have_content("Successfully created")

      <%=
  @columns.map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type

    case type
    when :datetime
         "      expect(page).to have_content(new_#{col}.in_time_zone(current_timezone).strftime('%m/%d/%Y')  + \" @ \" +
      new_#{col}.in_time_zone(current_timezone).strftime('%l').strip + \":\" +
      new_#{col}.in_time_zone(current_timezone).strftime('%M %p').strip + \" \" +
      timezonize(current_timezone))"
    when :integer
      if col.to_s.ends_with?("_id")
        # shoould the assoication be on here
      else
         "expect(page).to have_content(new_#{col})"
      end
    else
      "expect(page).to have_content(new_#{col})"
    end

  }.compact.join("\n      ")
  %>

    end
  end<% end %>


  describe "edit & update" do
    it "should return an editable form" do
      visit <%= path_helper_plural %>
      find("a.edit-<%= singular %>-button[href='/<%= namespace_with_slash %><%= plural %>/#{<%= singular %>1.id}/edit']").click

      expect(page).to have_content("Editing #{<%= singular %>1.<%= @display_class  %> || "(no name)"}")
<%=
    @columns.map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type
      limit = eval("#{singular_class}.columns_hash['#{col}']").limit
      sql_type =  eval("#{singular_class}.columns_hash['#{col}']").sql_type
      case type
      when :datetime
      when :integer
        if !col.to_s.ends_with?("_id")
            "     new_#{col} = rand(10000).floor \n" +
            "     find(\"[name='#{singular}[#{col}]']\").fill_in(with: new_#{col.to_s})"
        end
      when :text
        if sql_type == "text"
            "      " + "new_#{col.to_s} = FFaker::Lorem.paragraphs(3).join \n" +
            '      find("textarea[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'

        else # unreachable?
            "      " + "new_#{col.to_s} = FFaker::Name.name \n" +
            '      find("input[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'
        end
      when :string
        if sql_type == "varchar"
            "      " + "new_#{col.to_s} = FFaker::Name.name \n" +
            '      find("input[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'
        else
            "      " + "new_#{col.to_s} = FFaker::Lorem.paragraphs(1).join \n" +
            '      find("input[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'
        end
      when :boolean
          "     new_#{col} = rand(2).floor \n" +
          "     find(\"[name='#{singular}[#{col}]'][value='\#{new_#{col}}']\").choose"
      when :float
        "     new_#{col} = rand(1)*5000 \n" +
        "     find(\"[name='#{singular}[#{col}]']\").fill_in(with: new_#{col.to_s })"
      when :date
        "     new_#{col} = Date.current + rand(100).days \n" +
        "     find(\"[name='#{singular}[#{col}]']\").fill_in(with: new_#{col.to_s })"
      when :time
        "     new_#{col} = Time.current + rand(144).hours \n" +
        "     find(\"[name='#{singular}[#{col}]']\").fill_in(with: new_#{col.to_s })"
      when :enum
        "      list_of_#{col.to_s} = #{singular_class}.defined_enums['#{col.to_s}'].keys \n" +
        "      " + "new_#{col.to_s} = list_of_#{col.to_s}[rand(list_of_#{col.to_s}.length)].to_s \n" +
        '      find("select[name=\'' + singular + '[' + col.to_s + ']\']  option[value=\'#{new_' + col.to_s + '}\']").select_option'

      else
        "      " + "new_#{col.to_s} = FFaker::Name.name \n" +
        '      find("input[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'

      end
    }.join("\n")
    %>
      click_button "Save"
      within("turbo-frame#<%= singular %>__#{<%= singular %>1.id} ") do


<%=
    @columns.map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type
      case type
      when :datetime
        # TODO: implement me
      when :time
        # TODO: implement me
      when :date
        # TODO: implement me
      when :boolean
        # TODO: implement me
      else
        unless type==:integer && col.to_s.ends_with?("_id")
        '        expect(page).to have_content(new_' + col.to_s + ')'
        end
      end
    }.compact.join("\n")
    %>

      end
    end
  end

<% unless @no_delete %>  describe "destroy" do
    it "should destroy" do
      visit <%= path_helper_plural %>
      accept_alert do
        find("form[action='<%= namespace_with_dash %>/<%= plural %>/#{<%= singular %>1.id}'] > input.delete-<%= singular %>-button").click
      end
#      find("form[action='<%= namespace_with_dash %>/<%= plural %>/#{<%= singular %>1.id}'] > input.delete-<%= singular %>-button").click

      expect(page).to_not have_content(<%= singular %>1.<%= @display_class %>)
      expect(<%= singular_class %>.where(id: <%= singular %>1.id).count).to eq(0)
    end
  end<% end %>
end

