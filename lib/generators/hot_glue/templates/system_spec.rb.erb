require 'rails_helper'

describe "interaction for <%= controller_class_name %>", type: :feature do
  include HotGlue::ControllerHelper
  <% unless @god %>let(:<%= @auth %>) {create(:<%= @auth.gsub('current_', '') %>)}<%end%>

  let!(:<%= singular %>1) {create(:<%= singular %><%= object_parent_mapping_as_argument_for_specs %><% if (eval(@singular_class).instance_methods.include?(display_class.to_s))  %>, <%= display_class %>: FFaker::Name.name  <% end %> )}
  let!(:<%= singular %>2) {create(:<%= singular %><%= object_parent_mapping_as_argument_for_specs %> )}
  let!(:<%= singular %>3) {create(:<%= singular %><%= object_parent_mapping_as_argument_for_specs %> )}

  <%= objest_nest_factory_setup %>


  <% unless @god %>
  before(:each) do
    login_as(<%= @auth %>)
  end
  <% end %>

  describe "index" do
    it "should show me the list" do
      visit <%= path_helper_plural %>

<%=
@columns.map { |col|
  type = eval("#{singular_class}.columns_hash['#{col}']").type
  # limit = eval("#{singular_class}.columns_hash['#{col}']").limit
  # sql_type = eval("#{singular_class}.columns_hash['#{col}']").sql_type
  #

  case type
  when :datetime

    "      " + ["expect(page).to have_content(#{singular}#{1}.#{col}.in_time_zone(current_timezone).strftime('%m/%d/%Y @ %l:%M %p ').gsub('  ', ' ') + timezonize(current_timezone)  )"].join("\n      ")

  when :integer
    if !col.ends_with?("_id")
      "      " + ["expect(page).to have_content(#{singular}#{1}.#{col})"].join("\n      ")
    end
  end

}.join("\n")
     
      %>

    end
  end

  describe "new & create" do
    it "should create a new <%= singular.titlecase %>" do
      visit <%= path_helper_plural %>
      click_link "New <%= singular.titlecase %>"
      expect(page).to have_selector(:xpath, './/h3[contains(., "New <%= singular.titlecase %>")]')

<%=
  @columns.map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type
    # limit = eval("#{singular_class}.columns_hash['#{col}']").limit
    # sql_type = eval("#{singular_class}.columns_hash['#{col}']").sql_type
    #

    case type
    when :datetime
    when :integer
      "      " + 'find("input#' + singular + '_' + col.to_s + '").fill_in(with: rand(10))'
    else
      "      " + "new_#{col} = 'new_test-email@nowhere.com' \n" +
      '      ' + 'find("input#' + singular + '_' + col.to_s + '").fill_in(with: new_' + col.to_s + ')'
    end

  }.join("\n")

        %>
      click_button "Save"
      expect(page).to have_content("Successfully created")

      <%=
  @columns.map { |col|
    type = eval("#{singular_class}.columns_hash['#{col}']").type

    case type
    when :datetime
    when :integer
    else
      "expect(page).to have_content(new_#{col})"
    end

  }.join("\n")
  %>

    end
  end

  describe "show" do
    it "should return a view form" do
      visit <%= path_helper_plural %>

    end
  end

  describe "edit & update" do
    it "should return an editable form" do
      visit <%= path_helper_plural %>
      find("a.edit-<%= singular %>-button[href='/<%= namespace_with_slash %><%= plural %>/#{<%= singular %>1.id}/edit']").click

      expect(page).to have_content("Editing #{<%= singular %>1.<%= @display_class  %> || "(no name)"}")
<%=
    @columns.map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type

      case type
      when :datetime
      when :integer
      else
        "      " + "new_#{col.to_s} = FFaker::Name.name \n" +

        '      find("input[name=\'' + singular + '[' + col.to_s + ']\']").fill_in(with: new_' + col.to_s + ')'

      end
    }.join("\n")
    %>
      click_button "Save"
      within("turbo-frame#<%= singular %>__#{<%= singular %>1.id} ") do


<%=
    @columns.map { |col|
      type = eval("#{singular_class}.columns_hash['#{col}']").type
      case type
      when :datetime
      when :integer
      else
        '        expect(page).to have_content(new_' + col.to_s + ')'
      end
    }.join("\n")
    %>

      end
    end
  end

  describe "destroy" do
    it "should destroy" do
      visit <%= path_helper_plural %>
      #accept_alert do
      # find("form[action='<%= namespace_with_dash %>/<%= plural %>/#{<%= singular %>1.id}'] > button.delete-<%= singular %>-button").click
      #end
      find("form[action='<%= namespace_with_dash %>/<%= plural %>/#{<%= singular %>1.id}'] > button.delete-<%= singular %>-button").click

      expect(page).to_not have_content(<%= singular %>1.<%= @display_class %>)
      expect(<%= singular_class %>.where(id: <%= singular %>1.id).count).to eq(0)
    end
  end
end

