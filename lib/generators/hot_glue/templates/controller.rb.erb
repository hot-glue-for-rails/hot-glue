# frozen_string_literal: true

class <%= controller_class_name %> < <%= controller_descends_from %>
  # regenerate this controller with
  <% if defined?(RuboCop) %># rubocop:disable Layout/LineLength
  <% end %># <%= regenerate_me_code %><% if defined?(RuboCop) %>
  # rubocop:enable Layout/LineLength <% end %>

  helper :hot_glue
  include HotGlue::ControllerHelper

  <% unless @god %>before_action :<%= "authenticate_" + @auth_identifier.split(".")[0] + "!" %><% end %><% if any_nested? %>
    <% nest_chain = [] %> <% @nested_set.each { |arg|

    if auth_identifier == arg[:singular]
      this_scope = auth_object
    elsif nest_chain.empty?
      this_scope = "#{@auth ? auth_object : class_name}.#{arg}s"
    else
      this_scope = "#{nest_chain.last}.#{arg[:plural]}"
    end

     nest_chain << arg %>
  before_action :<%= arg[:singular] %><%= ", if: -> { params.include?(:#{arg[:singular]}_id) }" if arg[:optional] %><% } %><% end %>
  before_action :load_<%= singular_name %>, only: %i[<%= "show edit update" unless @no_edit %> <%= "destroy" unless @no_delete %>]
  after_action -> { flash.discard }, if: -> { request.format.symbol == :turbo_stream }<% if @nested_set.any? %>
    def <%= @nested_set[0][:singular] %><% if @god
       next_object = nil
       collect_objects = @nested_set.reverse.collect {|x|
           if eval("#{next_object || class_name}.reflect_on_association(:#{x[:singular]})").nil?
             raise "***** Unable to find the association `#{x[:singular]}` on the class #{next_object || class_name} ..... you probably want to add `belongs_to :#{x}` to the #{next_object || class_name} object?"
           end
           next_object = eval("#{next_object || class_name}.reflect_on_association(:#{x[:singular]})").class_name
       }
       root_object = collect_objects.last
     else
       if @nested_set[0][:singular] == @auth_identifier
         root_object = @auth
       else
         root_object = @auth + "." + @nested_set[0][:plural]
       end
     end
 %><% if !@god && @nested_set[0][:singular] == @auth_identifier %>
    @<%= @nested_set[0][:singular] %> ||= <%= root_object %>
 <% else %>
    @<%= @nested_set[0][:singular] %> ||= <%= root_object %>.find(params[:<%=  @nested_set[0][:singular]  %>_id])<%= " if params.include?(:#{@nested_set[0][:singular]}_id)" if @nested_set[0][:optional] %> <% end %>
  end
  <% end %><% if any_nested? %><% nest_chain = [@nested_set[0][:singular]]; %>
    <% for index in 1..(@nested_set.count - 1) do
      arg = @nested_set[index]

      last_arg = (index == 0 ? nil : @nested_set[index-1])

      this_scope =  "#{nest_chain.last}.#{arg[:plural]}"
      nest_chain << arg[:singular] %>
  def <%= arg[:singular] %>
    @<%=  arg[:singular] %> ||= (<%= this_scope; %>.find(params[:<%=  arg[:singular] %>_id]) <%= " if params.include?(:#{last_arg[:singular]}_id)" if last_arg && @god && last_arg[:optional] %>)
      <% if @god && last_arg && (last_arg[:optional] ) %>@<%= arg[:singular] %> ||=  (<%=  collect_objects[index-1] %>.find(params[:<%= arg[:singular] %>_id]) if params.include?(:<%= arg[:singular] %>_id) )   <% end %>
  end<% end %><% end %>
  <% if !@self_auth %>
  def load_<%= singular_name %>
    <% if @nested_set[0] && @nested_set[0][:optional] %>if params.include?(:<%= @nested_set.last[:singular] %>_id)
      @<%= singular_name %> = <%= object_scope.gsub("@",'') %>.find(params[:id])
    else <% end %>@<%= singular_name %> = <%= object_scope %>.find(params[:id])<% if @nested_set[0] && @nested_set[0][:optional]  %>
    end<% end %>
  end
  <% else %>
  def load_<%= singular_name %>
    @<%= singular_name %> = (<%= auth_object.gsub("@",'') %><%= " if params.include?(:#{@nested_set[0][:singular]}_id)" if @nested_set.any? && @nested_set[0][:optional] %>)<% if @nested_set.any? && @nested_set[0][:optional] %> || <%= class_name %>.find(params[:id])<% end %>
  end<% end %>
  <% if @paginate_per_page_selector %>def per
    params[:per] || 10
  end<% end %>
  <% unless @no_list %>
  def load_all_<%= plural %><% if @search == "set" %>
    @q = params[:q] ||  <%= {"0" => @search_fields.collect{|foo| {"#{foo}_match".to_sym => ((@columns_map[foo.to_sym].modify_as && @columns_map[foo.to_sym].modify_as[:binary]) ? "-1" : ""), "#{foo}_search".to_sym => ""}}.reduce({}, :merge)  } %> <% end %>
  <%= load_all_code %>
  end

  def index
    load_all_<%= plural %><% if @search_fields %>
<%= @search_fields.collect{|field_name| @columns_map[field_name.to_sym].code_to_reset_match_if_search_is_blank}.compact.join("     \n") %><% end %>
    <% if @pundit %><% if @pundit && !@pundit_policy_override %>
    authorize @<%= plural_name %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.index?<% end %>
  rescue Pundit::NotAuthorizedError
    flash[:alert] = 'You are not authorized to perform this action.'
    render 'layouts/error'<% end %>
  end<% end %>

<% if create_action %>  def new<% if @object_owner_sym %>
    @<%= singular_name %> = <%= class_name %>.new<% if eval("#{class_name}.reflect_on_association(:#{@object_owner_sym})").class == ActiveRecord::Reflection::BelongsToReflection  %>(<%= @object_owner_sym %>: <%= @object_owner_eval %>)<% end %><% elsif @object_owner_optional && any_nested? %>
    @<%= singular_name %> = <%= class_name  %>.new({}.merge(<%= @nested_set.last[:singular] %> ? {<%= @object_owner_sym %>: <%= @object_owner_eval %>} : {}))<% else %>
    @<%= singular_name %> = <%= class_name  %>.new(<% if any_nested? %><%= @object_owner_sym %>: <%= @object_owner_eval %><% end %>)<% end %>
    <% if @pundit && !@pundit_policy_override %>
    authorize @<%= singular %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.new?<% end %><% if @pundit %>
    @action = 'new'
  rescue Pundit::NotAuthorizedError
    flash[:alert] = 'You are not authorized to perform this action.'
    load_all_<%= plural %>
    render :index<% end %>
  end

  def create
    flash[:notice] = +''
    modified_params = modify_date_inputs_on_params(<%= singular_name %>_params.dup, <%= current_user_object %>, <%= datetime_fields_list %>)<% if @object_owner_sym && eval("#{class_name}.reflect_on_association(:#{@object_owner_sym})").class == ActiveRecord::Reflection::BelongsToReflection  %>
    modified_params = modified_params.merge(<%= @object_owner_sym %>: <%= @object_owner_eval %>) <% elsif @object_owner_optional && any_nested? %>
    modified_params = modified_params.merge(<%= @object_owner_name %> ? {<%= @object_owner_sym %>: <%= @object_owner_eval %>} : {}) <% end %>

   <% if @hawk_keys.any? %> modified_params = hawk_params({<%= hawk_to_ruby %>}, modified_params)<% end %>
    <%= controller_attachment_orig_filename_pickup_syntax %>
    <%= creation_syntax %>
    <% if @pundit %><% @related_sets.each do |key, related_set| %>
    check_<%= related_set[:association_ids_method].to_s %>_permissions(modified_params, :create)<% end %><% end %>
      <% if @pundit && !@pundit_policy_override %>
    authorize @<%= singular %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.create?<% end %>
    <%= @code_before_create ? "\n    " + @code_before_create.gsub(";", "\n") : "" %>
    if @<%= singular_name %>.save<%= @code_after_create ? ("\n      " + @code_after_create.gsub(";", "\n"))  : ""%>
      flash[:notice] = "Successfully created #{@<%= singular %>.<%= display_class %>}"
      <%= post_action_parental_updates.compact.join("\n      ") %>
      load_all_<%= plural %>
      <% unless @display_edit_after_create %>render :create<% else %>redirect_to <%=   HotGlue.optionalized_ternary(namespace: @namespace,
                                 top_level: true,
                                 target:  @singular,
                                 nested_set: @nested_set,
                                 modifier: 'edit_',
                                 with_params: true,
                                 instance_last_item: true,
                                 put_form: true).gsub("(#{singular}", "(@#{singular}") %><% end %>
    else
      flash[:alert] = "Oops, your <%= singular_name %> could not be created. #{@hawk_alarm}"
      @action = 'new'
      <% unless @display_edit_after_create %>render :create, status: :unprocessable_entity<% else %>render :new , status: :unprocessable_entity<% end %>
    end<% if @pundit %>
  rescue Pundit::NotAuthorizedError => e
    flash[:alert] = "Not authorized."
    @<%= singular %>.errors.add(:base, e.message)
    <% unless @display_edit_after_create %>render :create, status: :unprocessable_entity<% else %>redirect_to <%=   HotGlue.optionalized_ternary(namespace: @namespace,
                                 top_level: true,
                                 target:  @singular,
                                 nested_set: @nested_set,
                                 modifier: 'edit_',
                                 with_params: true,
                                 instance_last_item: true,
                                 put_form: true).gsub("(#{singular}", "(@#{singular}") %><% end %>

    <% end %>
  end

<% end %>
<% unless @no_edit %>
  def show<% if @pundit && !@pundit_policy_override %>
    authorize @<%= singular %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.show?<% end %>
    redirect_to <%=  HotGlue.optionalized_ternary(namespace: @namespace,
                                 target:  @singular,
                                 top_level: false,
                                 nested_set: @nested_set,
                                 modifier: 'edit_',
                                 with_params: true,
                                 instance_last_item: true,
                                 put_form: true).gsub("(#{singular}", "(@#{singular}") %>
  end

  def edit<% if @pundit && !@pundit_policy_override %>
    authorize @<%= singular %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.edit?<% end %>
    @action = 'edit'
    render :edit<% if @pundit %>
  rescue Pundit::NotAuthorizedError
    flash[:notice] = "Editing <%= singular + ' ' if @include_object_names %>#{@<%= singular %>.<%= display_class %>} not authorized."
    render :index <% end %>
  end

<% end %><% if @build_update_action %>  def update
    flash[:notice] = +''
    flash[:alert] = nil
    <% @magic_buttons.each do |button| %>
    if <%= singular_name %>_params[:__<%= button %>]
      @<%= singular_name %>.<%= button %>!
      flash[:notice] << "<% singular %> <%= button.titlecase %>."
    end
    <% end %>

    modified_params = modify_date_inputs_on_params(<% if @update_show_only %>update_<% end %><%= singular_name %>_params.dup<%= controller_update_params_tap_away_magic_buttons  %>, <%= current_user_object %>, <%= datetime_fields_list %>)<% if @object_owner_sym &&  eval("#{class_name}.reflect_on_association(:#{@object_owner_sym})").class == ActiveRecord::Reflection::BelongsToReflection  %>
    modified_params = modified_params.merge(<%= @object_owner_sym %>: <%= @object_owner_eval %>) <% elsif @object_owner_optional && any_nested? %>
    modified_params = modified_params.merge(<%= @object_owner_name %> ? {<%= @object_owner_sym %>: <%= @object_owner_eval %>} : {}) <% end %>
    <% if @pundit %><% @related_sets.each do |key, related_set| %>
    check_<%= related_set[:association_ids_method].to_s %>_permissions(modified_params, :update)<% end %><% end %>

    <%= @alt_lookups.collect{|lookup, data|
      col = @columns_map[lookup.to_sym]
      col.prelookup_syntax
    }.join("\n") %>

    <% if @alt_lookups.any? %>
    modified_params.merge(<%=  @alt_lookups.collect{|lookup,field|
      field_name = lookup.gsub("_id","")
      "#{field_name}: #{field_name}"
    }.join(",") %>)
    <% end %>
    <% if @hawk_keys.any? %>    modified_params = hawk_params({<%= hawk_to_ruby %>}, modified_params)<% end %>
    <%= controller_attachment_orig_filename_pickup_syntax %>
      <% if @pundit && !@pundit_policy_override %>
      authorize @<%= singular_name %>
      <%= @code_before_update ? "\n    " + @code_before_update.gsub(";", "\n") : "" %>

    if @<%= singular_name %>.update(modified_params)

    <% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.update?
    if @<%= singular_name %>.update(modified_params)
      <% else %>
      <%= @code_before_update ? "\n    " + @code_before_update.gsub(";", "\n") : "" %>
    if @<%= singular_name %>.update(modified_params)<% end %>
      <%= post_action_parental_updates.compact.join("\n      ") %>
      <%= @code_after_update ? "\n    " + @code_after_update.gsub(";", "\n") : "" %>
      <% if @display_list_after_update %>    load_all_<%= plural %><% end %>
      flash[:notice] << "Saved #{@<%= singular %>.<%= display_class %>}"
      flash[:alert] = @hawk_alarm if @hawk_alarm
      <% unless @big_edit %>render :update, status: :unprocessable_entity<% else  %>
      redirect_to <%= path_helper_plural(false) %>
     <% end %>
    else
      flash[:alert] = "<%= singular_name.titlecase %> could not be saved. #{@hawk_alarm}"
      @action = 'edit'
      <% unless @big_edit %>render :update<% else %>render :edit<% end %>, status: :unprocessable_entity
    end<% if @pundit %>
  rescue Pundit::NotAuthorizedError
    flash[:alert] = "Updating #{@<%= singular_name %>.<%= display_class %>} not authorized. "
      <% unless @big_edit %>render :update<% else %>render :edit<% end %>, status: :unprocessable_entity
        <% end %>
  end

<% end %><% if destroy_action %>  def destroy
    <% if @pundit && !@pundit_policy_override %>
    authorize @<%= singular %><% elsif @pundit && @pundit_policy_override %>
    skip_authorization
    raise Pundit::NotAuthorizedError if ! <%= @pundit_policy_override %>.destroy?<% end %>
    begin
      @<%=singular_name%>.destroy
      flash[:notice] = '<%= singular_name.titlecase %> successfully deleted'
    rescue ActiveRecordError => e
      flash[:alert] = '<%= singular_name.titlecase %> could not be deleted'
    end
    <%= post_action_parental_updates.join("\n    ") %>
    load_all_<%= plural %><% if @pundit %>
  rescue Pundit::NotAuthorizedError
    flash[:alert] = "Deleting #{@<%= singular_name %>.<%= display_class %>} not authorized. "
    render :update<% end %>
  end<% end %>

<% if @pundit %><% @related_sets.each do |key, rs| %>
  def check_<%= rs[:association_ids_method] %>_permissions(modified_params, action)
    # authorize the <%= rs[:association_ids_method] %> change using special modified_relations: {
    # <%= rs[:association_ids_method] %>: modified_params[:<%= rs[:association_ids_method] %>>]} syntax for Pundit
    modified_relations = { <%= rs[:association_ids_method] %>: modified_params[:<%= rs[:association_ids_method] %>] }
    return unless modified_params[:<%= rs[:association_ids_method] %>].present?
    policy_check = <%= singular_class %>Policy.new(current_user, @<%= singular %>,
                                                   modified_relations:).method("#{action}?".to_sym).call
    return if policy_check
    raise Pundit::NotAuthorizedError, message: @<%= singular %>.errors.collect{|k| "#{k.attribute} #{k.message}"}.join(" ")
  end<% end %><% end %>

  def <%=singular_name%>_params
    params.require(:<%= testing_name %>).permit(<%= ((fields_filtered_for_strong_params - @show_only ) + @magic_buttons.collect{|x| "__#{x}"}).collect{|sym| ":#{sym}"}.join(", ") %><%= ", " + @related_sets.collect{|key, rs| "#{rs[:association_ids_method]}: []"}.join(", ") if @related_sets.any? %><%= ", " +  @alt_lookups.collect{|k,v|  ":__lookup_#{v[:lookup_as]}"  }.join(", ") if @alt_lookups.any? %>)
  end<% if @update_show_only %>

  <% unless @no_edit %>
  def update_<%=singular_name%>_params
    params.require(:<%= testing_name %>).permit(<%= ((fields_filtered_for_strong_params - @update_show_only)  + @magic_buttons.collect{|x| "__#{x}"}).collect{|sym| ":#{sym}"}.join(", ") %><%= ", " + @related_sets.collect{|key, rs| "#{rs[:association_ids_method]}: []"}.join(", ") if @related_sets.any? %>)
  end<% end %>
  <% end %>

  <% if @search %>
  def search_params
    params.permit(:q, :page)
  end
  <% end %>
  def namespace
    <% if @namespace %>'<%= @namespace %>/'<% else %><% end %>
  end
end


