class <%= controller_class_name %> < <%= controller_descends_from %>
  helper :hot_glue
  include HotGlue::ControllerHelper

  <% unless @auth_identifier == '' || @god %>before_action :authenticate_<%= @auth_identifier %>!<% end %>
  <% if any_nested? %><% nest_chain = [] %> <% @nested_args.each { |arg|
    this_scope =   nest_chain.empty? ?  "#{@auth ? auth_object : class_name}.#{arg}s" : "#{nest_chain.last}.#{arg}s"
      nest_chain << arg %>
  before_action :<%= arg %>
    <% } %><% end %>
  before_action :load_<%= singular_name %>, only: [:show, :edit, :update, :destroy]
  after_action -> { flash.discard }, if: -> { request.format.symbol ==  :turbo_stream }

<% if no_devise_installed %>
  # TODO: implement current_user or use Devise
<% end %>

  <% if any_nested? %><% nest_chain = [] %> <% @nested_args.each { |arg|
    if !@god
      this_scope = nest_chain.empty? ?  "#{@auth ? auth_object : class_name}.#{arg}s" : "#{nest_chain.last}.#{arg}s"
    else
      this_scope = eval(class_name + ".reflect_on_association(:#{arg})").class_name
    end
    nest_chain << arg
    %>
  def <%= arg %>
    @<%= arg %> ||= <%= this_scope %>.find(params[:<%= arg %>_id])
  end<% } %><% end %>

<% if !@self_auth %>
  def load_<%= singular_name %>
    @<%= singular_name %> = <%= object_scope.gsub("@",'') %>.find(params[:id])
  end
  <% else %>
  def load_<%= singular_name %>
    @<%= singular_name %> = <%= auth_object.gsub("@",'') %>
  end<% end %>

  def load_all_<%= plural %>
    <% if !@self_auth %>@<%= plural_name %> = <%= object_scope.gsub("@",'') %><% if model_has_strings? %>.where(<%=class_name %>.arel_table[:email].matches("%#{@__general_string}%"))<% end %>.page(params[:page])
    <% else %>@<%= plural_name %> = [<%= auth_object %>]<% end %>
  end

  def index
    load_all_<%= plural %>
    respond_to do |format|
       format.html
    end
  end

<% if create_action %>  def new <% if ! @god %>
    @<%= singular_name %> = <%= class_name  %>.new(<%= @object_owner_sym %>: <%= @object_owner_eval %>)
   <% else %>
    @<%= singular_name %> = <%= class_name  %>.new
   <% end %>
    respond_to do |format|
      format.html
    end
  end

  def create
    modified_params = modify_date_inputs_on_params(<%=singular_name %>_params.dup<% if !@object_owner_sym.empty? %>.merge!(<%= @object_owner_sym %>: <%= @object_owner_eval %> )<% end %> <%= @auth ? ', ' + @auth : '' %>)
    @<%=singular_name %> = <%=class_name %>.create(modified_params)

    if @<%= singular_name %>.save
      flash[:notice] = "Successfully created #{@<%= singular %>.<%= display_class %>}"
      load_all_<%= plural %>
      respond_to do |format|
        format.turbo_stream
        format.html { redirect_to <%= path_helper_plural %> }
      end
    else
      flash[:alert] = "Oops, your <%= singular_name %> could not be created."
      respond_to do |format|
        format.turbo_stream
        format.html
      end
    end
  end

<% end %>  def show
    respond_to do |format|
      format.html
    end
  end

<% unless @no_edit %>  def edit
    respond_to do |format|
      format.turbo_stream
      format.html
    end
  end

<% end %><% if @build_update_action %>  def update
<%= controller_magic_button_update_actions %>

    if @<%= singular_name %>.update(modify_date_inputs_on_params(<%= singular %>_params<%= @auth ? ', ' + @auth : '' %>)<%= controller_update_params_tap_away_magic_buttons %>)
      flash[:notice] = "Saved #{@<%= singular %>.<%= display_class %>}"
    else
      flash[:alert] = "<%= singular_name.titlecase %> could not be saved."
    end
    respond_to do |format|
      format.turbo_stream
      format.html
    end
  end

<% end %><% if destroy_action %>  def destroy
    begin
      @<%=singular_name%>.destroy
    rescue StandardError => e
      flash[:alert] = "<%= singular_name.titlecase %> could not be deleted"
    end
    load_all_<%= plural %>
    respond_to do |format|
      format.turbo_stream
      format.html { redirect_to <%= path_helper_plural %> }
    end
  end

<% end %>def <%=singular_name%>_params
    params.require(:<%=singular_name%>).permit( <%= @columns + @magic_buttons.collect(&:to_sym) %> )
  end

  def default_colspan
    <%= @default_colspan %>
  end

  def namespace
    <% if @namespace %>"<%= @namespace %>/" <% else %>""<% end %>
  end

  def common_scope
    @nested_args
  end
end


