class <%= controller_class_name %> < <%= controller_descends_from %>
  helper :hot_glue
  include HotGlue::ControllerHelper

  <% unless @auth_identifier == '' || @god %>before_action :authenticate_<%= @auth_identifier %>!<% end %>
  <% if any_nested? %><% nest_chain = [] %> <% @nested_set.each { |arg|

    if auth_identifier == arg[:singular]
      this_scope = auth_object
    elsif nest_chain.empty?
      this_scope = "#{@auth ? auth_object : class_name}.#{arg}s"
    else
      this_scope = "#{nest_chain.last}.#{arg[:plural]}"
    end

     nest_chain << arg %>
  before_action :<%= arg[:singular] %><%= ", if: -> { params.include?(:#{arg[:singular]}_id) }" if arg[:optional] %>

    <% } %><% end %>
  before_action :load_<%= singular_name %>, only: [:show, :edit, :update, :destroy]
  after_action -> { flash.discard }, if: -> { request.format.symbol ==  :turbo_stream }
<% if @nested_args.any? %>
  def <%= @nested_set[0][:singular] %><% if @god
       next_object = nil
       collect_objects = @nested_set.reverse.collect {|x|
           if eval("#{next_object || class_name}.reflect_on_association(:#{x[:singular]})").nil?
             raise "***** Unable to find the association `#{x[:singular]}` on the class #{next_object || class_name} ..... you probably want to add `belongs_to :#{x}` to the #{next_object || class_name} object?"
           end
           next_object = eval("#{next_object || class_name}.reflect_on_association(:#{x[:singular]})").class_name
       }
       root_object = collect_objects.last
     else
       if @nested_set[0][:singular] == @auth_identifier
         root_object = @auth
       else
         root_object = @auth + "." + @nested_set[0][:plural]
       end
     end
 %><% if !@god && @nested_set[0][:singular] == @auth_identifier %>
    @<%= @nested_set[0][:singular] %> ||= <%= root_object %> <% else %>
    @<%= @nested_set[0][:singular] %> ||= <%= root_object %>.find(params[:<%=  @nested_set[0][:singular]  %>_id])<%= " if params.include?(:#{@nested_set[0][:singular]}_id)" if @nested_set[0][:optional] %> <% end %>
  end
  <% end %><% if any_nested? %><% nest_chain = [@nested_set[0][:singular]]; this_scope = @nested_set[0][:plural]; %>
    <%   for index in 0..(@nested_set.count - 1) do
      arg = @nested_set[index]
      last_arg = (index == 0 ? nil : @nested_set[index-1])

      this_scope =  "#{nest_chain.last}.#{arg[:plural]}"
      nest_chain << arg %>
  def <%= arg[:singular] %>
    @<%= arg[:singular] %> ||= (<%= this_scope %>.find(params[:<%= arg[:singular] %>_id])<%= " if params.include?(:#{last_arg[:singular]}_id)" if last_arg && @god && last_arg[:optional] %>)
    <% if @god &&  (last_arg[:optional] ) %>@<%= arg[:singular] %> ||=  (<%=  collect_objects[index-1] %>.find(params[:<%= arg[:singular] %>_id]) if params.include?(:<%= arg[:singular] %>_id) )   <% end %>
  end<% end %> <% end %> <% if !@self_auth %>

  def load_<%= singular_name %>
    @<%= singular_name %> = (<%= object_scope.gsub("@",'') %>.find(params[:id])<%= " if params.include?(:#{@nested_set.last[:singular]}_id)" if @nested_set[0] && @nested_set[0][:optional]  %>)<% if @nested_set[0] && @nested_set[0][:optional] %> || <%= class_name %>.find(params[:id])<% end %>
  end
  <% else %>
  def load_<%= singular_name %>
    @<%= singular_name %> = (<%= auth_object.gsub("@",'') %><%= " if params.include?(:#{@nested_set[0][:singular]}_id)" if @nested_set.any? && @nested_set[0][:optional] %>)<% if @nested_set.any? && @nested_set[0][:optional] %> || <%= class_name %>.find(params[:id])<% end %>
  end<% end %>

  def load_all_<%= plural %> <% if !@self_auth %>
    @<%= plural_name %> = ( <%= object_scope.gsub("@",'') %>.page(params[:page])<%= n_plus_one_includes %><%= " if params.include?(:#{ @nested_set.last[:singular]}_id)" if @nested_set.any? && @nested_set[0] &&  @nested_set[0][:optional] %>) <% if @nested_set[0] &&  @nested_set[0][:optional] %> || <%= class_name %>.all<% end %> <% else %>
    @<%= plural_name %> = <%= class_name %>.where(id: <%= auth_object.gsub("@",'') %>.id)<%= n_plus_one_includes %> # returns iterable even though this <%= singular_name %> is only allowed access to themselves<% end %>
  end

  def index
    load_all_<%= plural %>
    respond_to do |format|
       format.html
    end
  end

<% if create_action %>  def new
    <% if ! @god %>
    @<%= singular_name %> = <%= class_name  %>.new(<%= @object_owner_sym %>: <%= @object_owner_eval %>)
   <% elsif @object_owner_optional && any_nested? %>
    @<%= singular_name %> = <%= class_name  %>.new({}.merge(<%= @nested_set.last[:singular] %> ? {<%= @object_owner_sym %>: <%= @object_owner_eval %>} : {})) <% else %>
    @<%= singular_name %> = <%= class_name  %>.new(<% if any_nested? %><%= @object_owner_sym %>: <%= @object_owner_eval %><% end %>)
   <% end %>
    respond_to do |format|
      format.html
    end
  end

  def create
    modified_params = modify_date_inputs_on_params(<%= singular_name %>_params.dup<% if ! @object_owner_sym.empty? %>.merge!(<% if @object_owner_optional && any_nested? %><%= @object_owner_name %> ? {<%= @object_owner_sym %>: <%= @object_owner_eval %>} : {} <% else  %> <%= @object_owner_sym %>: <%= @object_owner_eval %><% end %>) <% end %>)


    @<%=singular_name %> = <%= class_name %>.create(modified_params)

    if @<%= singular_name %>.save
      flash[:notice] = "Successfully created #{@<%= singular %>.<%= display_class %>}"
      load_all_<%= plural %>
      respond_to do |format|
        format.turbo_stream
        format.html { redirect_to <%= path_helper_plural %> }
      end
    else
      flash[:alert] = "Oops, your <%= singular_name %> could not be created."
      respond_to do |format|
        format.turbo_stream
        format.html
      end
    end
  end

<% end %>  def show
    respond_to do |format|
      format.html
    end
  end

<% unless @no_edit %>  def edit
    respond_to do |format|
      format.turbo_stream
      format.html
    end
  end

<% end %><% if @build_update_action %>  def update
<%= controller_magic_button_update_actions %>    if @<%= singular_name %>.update(modify_date_inputs_on_params(<%= singular %>_params<%= @auth ? ', ' + @auth : '' %>)<%= controller_update_params_tap_away_magic_buttons %>)
      flash[:notice] = (flash[:notice] || "") << "Saved #{@<%= singular %>.<%= display_class %>}"
    else
      flash[:alert] = (flash[:alert] || "") << "<%= singular_name.titlecase %> could not be saved."

    end
<% if @display_list_after_update %>    load_all_<%= plural %><% end %>
    respond_to do |format|
      format.turbo_stream
      format.html
    end
  end

<% end %><% if destroy_action %>  def destroy
    begin
      @<%=singular_name%>.destroy
    rescue StandardError => e
      flash[:alert] = "<%= singular_name.titlecase %> could not be deleted"
    end
    load_all_<%= plural %>
    respond_to do |format|
      format.turbo_stream
      format.html { redirect_to <%= path_helper_plural %> }
    end
  end<% end %>

  def <%=singular_name%>_params
    params.require(:<%=singular_name%>).permit( <%= @columns + @magic_buttons.collect(&:to_sym) %> )
  end

  def default_colspan
    <%= @default_colspan %>
  end

  def namespace
    <% if @namespace %>"<%= @namespace %>/" <% else %>""<% end %>
  end
end


